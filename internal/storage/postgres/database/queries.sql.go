// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package database

import (
	"context"
)

const addMetric = `-- name: AddMetric :one
INSERT INTO queries(QueryDescription, Query) VALUES($1, $2) RETURNING queryid, querydescription, query
`

type AddMetricParams struct {
	Querydescription string
	Query            string
}

func (q *Queries) AddMetric(ctx context.Context, arg AddMetricParams) (Query, error) {
	row := q.db.QueryRowContext(ctx, addMetric, arg.Querydescription, arg.Query)
	var i Query
	err := row.Scan(&i.Queryid, &i.Querydescription, &i.Query)
	return i, err
}

const getAllMetrics = `-- name: GetAllMetrics :many
SELECT queryid, querydescription, query FROM queries
`

func (q *Queries) GetAllMetrics(ctx context.Context) ([]Query, error) {
	rows, err := q.db.QueryContext(ctx, getAllMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Query
	for rows.Next() {
		var i Query
		if err := rows.Scan(&i.Queryid, &i.Querydescription, &i.Query); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMetric = `-- name: GetMetric :one
SELECT queryid, querydescription, query FROM queries WHERE QueryId = $1
`

func (q *Queries) GetMetric(ctx context.Context, queryid int32) (Query, error) {
	row := q.db.QueryRowContext(ctx, getMetric, queryid)
	var i Query
	err := row.Scan(&i.Queryid, &i.Querydescription, &i.Query)
	return i, err
}
